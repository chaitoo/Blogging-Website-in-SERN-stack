{"version":3,"sources":["../src/db.js"],"names":["MongoClient","require","DB","db","prototype","connect","uri","_this","Promise","resolve","reject","__this","then","database","err","console","log","message","close","insertBulkData","coll","docs","collection","strict","error","Array","isArray","_docs","JSON","parse","stringify","e","insertMany","results","insertedCount","getFestivals","query","cursor","find","toArray","docArray","module","exports"],"mappings":"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","file":"db.js","sourcesContent":["const MongoClient = require('mongodb').MongoClient;\n\nfunction DB() {\n  this.db = null;\n}\n\n//start the database connection\nDB.prototype.connect = function (uri) {\n  let _this = this;\n  return new Promise(function(resolve, reject) {\n    if(_this.db) {\n      resolve();\n    } else {\n      let __this = _this;\n      MongoClient.connect(uri)\n      .then(\n        function(database) {\n          __this.db = database;\n          resolve();\n        },\n        function(err) {\n          console.log(\"Error message: \"+ err.message);\n          reject(err.message);\n        }\n      )\n    }\n  });\n};\n\n//close the database connection\nDB.prototype.close = function () {\n  if (this.db) {\n    this.db.close()\n    .then(\n      function() {\n        console.log(\"disconnected from database\");\n      },\n      function(err) {\n        console.log(\"Failed to close database: \"+ err.message);\n      }\n    )\n  }\n};\n\n// insert bult data at once\n\nDB.prototype.insertBulkData = function (coll, docs) {\n  let _this = this;\n  return new Promise(function(resolve, reject) {\n    _this.db.collection(coll, {strict: false}, function(error, collection) {\n      if(error) {\n        console.log(\"cannot accesss the collection :\"+error.message);\n        reject(err.message);\n      } else {\n        if(!Array.isArray(docs)){\n          console.log(\"Data is not an array\");\n          reject({\"message\":\"data is not array type\"});\n        } else {\n          try {\n            var _docs = JSON.parse(JSON.stringify(docs));\n          } catch (e) {\n            console.log(\"Array data is not in json\");\n          }\n\n          collection.insertMany(_docs)\n          .then(\n            function(results) {\n              resolve(results.insertedCount);\n            },\n            function(err) {\n              console.log(\"Failed to -- insert Docs: \" + err.message);\n\t\t\t\t\t\t\treject(err.message);\n            }\n          )\n        }\n      }\n    })\n  });\n};\n\nDB.prototype.getFestivals = function(coll, query) {\n\n\tvar _this=this;\n\n\treturn new Promise(function (resolve, reject) {\n\t\t_this.db.collection(coll, {strict:false}, function(error, collection){\n\t\t\tif (error) {\n\t\t\t\tconsole.log(\"Could not access collection: \" + error.message);\n\t\t\t\treject(error.message);\n\t\t\t} else {\n\t\t\t\tvar cursor = collection.find(query);\n\t\t\t\tcursor.toArray(function(error, docArray) {\n\t\t\t    \tif (error) {\n\t\t\t\t\t\tconsole.log(\"Error reading fron cursor: \" + error.message);\n\t\t\t\t\t\treject(error.message);\n\t\t\t\t\t} else {\n\t\t\t\t\t\tresolve(docArray);\n\t\t\t\t\t}\n\t\t    \t})\n\t\t\t}\n\t\t})\n\t})\n};\n\nmodule.exports = DB;\n"]}