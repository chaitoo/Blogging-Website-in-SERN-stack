{"version":3,"sources":["../src/api-routes.js"],"names":["router","Router","mysql","require","pool","createPool","connectionLimit","host","user","password","database","debug","get","req","res","getConnection","err","connection","release","status","json","console","log","threadId","query","rows","on","artist_id","params","_id","fest","title","fest_id","res_obj","festData","performers","JSON","parse","length","performer_query","i","push","post","fest_data","body","rowCount","values","subtitle","fullTitle","fromDate","toDate","description","capacity","age","budget","city","country","img_url","redirect","fest_title","user_id","blog_id","blog_data","image_url","weight","blog_title","module","exports"],"mappings":"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","file":"api-routes.js","sourcesContent":["import express from 'express';\n\n\nvar router = express.Router();\n\nvar mysql      = require('mysql');\nvar pool = mysql.createPool({\n  connectionLimit : 100,\n  host     : 'localhost',\n  user     : 'root',\n  password : 'musejam',\n  database : 'musefests',\n  debug    :  false\n});\n\n\n// festivals api\nrouter.get(\"/fests\",function(req,res){\n   pool.getConnection(function(err,connection){\n           if (err) {\n             connection.release();\n             res.status(100).json({\"status\" : \"Error in connection database\"});\n             return;\n           }\n\n           console.log('connected as id ' + connection.threadId);\n\n           connection.query(\"select * from festivals\",function(err,rows){\n               connection.release();\n               if(!err) {\n                   res.status(200).json(rows);\n               }\n           });\n\n           connection.on('error', function(err) {\n                 res.json({\"code\" : 100, \"status\" : \"Error in connection database\"});\n                 return;\n           });\n     });\n });\n\n router.get('/details/performers/:_id', (req, res) => {\n   let artist_id = req.params._id;\n   pool.getConnection(function(err,connection){\n           if (err) {\n             connection.release();\n             res.status(100).json({\"status\" : \"Error in connection database\"});\n             return;\n           }\n           var query = \"select * from artists where artist_id=\"+artist_id+\";\";\n           connection.query(query, function(err,rows){\n               connection.release();\n               if(!err) {\n                   res.status(200).json(rows);\n               }\n           });\n\n           connection.on('error', function(err) {\n                 res.status(100).json({\"status\" : \"Error in connection database\"});\n                 return;\n           });\n     });\n })\n\n router.get('/fests/:title', (req, res) => {\n   let fest = req.params.title;\n   pool.getConnection( (err, connection) => {\n     if(err) {\n       connection.release();\n       res.status(100).json({'status':'Error in connection database'});\n       return;\n     }\n     console.log('festival page'+fest+'api fetched !!');\n\n     connection.query(\"select * from festivals where title='\"+fest+\"'\", (err, rows) => {\n       connection.release();\n       if(!err) {\n         res.status(200).json(rows);\n       }\n     });\n\n     connection.on('error', (err) => {\n       res.status(100).json({'status':'Error in connection database'})\n     });\n   });\n });\n\n router.get('/festival/:_id', (req, res) => {\n   let fest_id = req.params._id;\n   pool.getConnection(function(err,connection){\n           if (err) {\n             connection.release();\n             res.status(100).json({\"status\" : \"Error in connection database\"});\n             return;\n           }\n\n           connection.query(\"select * from festivals where fest_id=\"+fest_id+\";\",function(err,rows){\n               connection.release();\n               if(!err) {\n                let res_obj = {};\n                res_obj.festData = rows[0];\n                res_obj.performers = []\n                let performers = JSON.parse(res_obj.festData.performers);\n\n                if(performers!==null && performers.length!=0) {\n                    var performer_query = \"select * from artists where \"\n                    for (var i = 0; i < performers.length; i++) {\n                       performer_query += \"artist_id=\"+performers[i]+\" \";\n                       if(i == performers.length-1) {\n                         performer_query += \";\"\n                       }\n                       else {\n                         performer_query += \"or \"\n                       }\n                    }\n\n                      connection.query(performer_query, function(err,rows) {\n                        if(!err) {\n                          res_obj.performers.push(rows);\n                          res.json(res_obj);\n                        }\n                      })\n                    }\n                    else {\n                      res.json(res_obj);\n                    }\n               }\n           });\n          //  res_obj.festival_data.performers.forEach((performer) => {\n          //    connection.query(\"select * from artists where artist_id=\"+performer+\";\", (err,rows) => {\n          //      connection.release();\n          //      if(!err) {\n          //        console.log(rows);\n          //      }\n          //    })\n          //  })\n\n\n           connection.on('error', function(err) {\n                 res.status(100).json({\"status\" : \"Error in connection database\"});\n                 return;\n           });\n     });\n });\n\n router.get('/artists/all', (req, res) => {\n   pool.getConnection( (err, connection) => {\n     if(err) {\n       connection.release();\n       res.status(100).json({'status':'Error in connection database'});\n       return;\n     }\n\n     connection.query(\"select artist_id, name from artists\", (err, rows) => {\n       connection.release();\n       if(!err) {\n         res.status(200).json(rows);\n       }\n     });\n\n     connection.on('error', (err) => {\n       res.status(100).json({'status':'Error in connection database'})\n     });\n   });\n })\n\n router.post('/add/festival', (req, res) => {\n   let fest_data = req.body;\n   pool.getConnection( (err, connection) => {\n     if(err) {\n       connection.release();\n       res.status(100).json({'status':'Error in connection database'});\n       return;\n     }\n\n     connection.query(\"select count(fest_id) as rowCount from festivals\", (err, rows) => {\n       connection.release();\n       if(!err) {\n         let fest_id = rows[0].rowCount+1;\n         if(!fest_data.performers)\n         fest_data.performers=\"\";\n         let values = '('+fest_id+',\"'+fest_data.title+'\",\"'+fest_data.subtitle+'\",\"'+fest_data.fullTitle+'\",\"'+fest_data.fromDate\n         +'\",\"'+fest_data.toDate+'\",\"'+fest_data.description+'\",\"'+fest_data.capacity+'\",'+fest_data.age+',\"'+fest_data.budget\n         +'\",\"'+fest_data.city+'\",\"'+fest_data.country+'\",\"'+fest_data.img_url+'\",\"['+fest_data.performers+']\");'\n         let query = 'INSERT INTO festivals (fest_id, title, subtitle, full_title, from_date, to_date, description, capacity,age, budget, city, country, img_url, performers) values'+values;\n\n         connection.query(query, (err, rows) => {\n           res.redirect('/festivals');\n         })\n\n       }\n     });\n\n     connection.on('error', (err) => {\n       res.status(100).json({'status':'Error in connection database'})\n     });\n   });\n })\n\n router.get('/remove/festival/:_id', (req, res) => {\n   let fest_id = req.params._id;\n   pool.getConnection(function(err,connection){\n           if (err) {\n             connection.release();\n             res.status(100).json({\"status\" : \"Error in connection database\"});\n             return;\n           }\n           var query = \"delete from festivals where fest_id=\"+fest_id+\";\";\n           connection.query(query,function(err,rows){\n               connection.release();\n               if(!err) {\n                   res.redirect('/festivals');\n               }\n           });\n\n           connection.on('error', function(err) {\n                 res.json({\"code\" : 100, \"status\" : \"Error in connection database\"});\n                 return;\n           });\n     });\n })\n\n router.post('/edit/festival/:fest_id/:user_id/:fest_title', (req, res) => {\n   let fest_id = req.params.fest_id;\n   let fest_title = req.params.fest_title;\n   let user_id = req.params.user_id;\n   let fest_data = req.body;\n   pool.getConnection(function(err,connection){\n           if (err) {\n             connection.release();\n             res.status(100).json({\"status\" : \"Error in connection database\"});\n             return;\n           }\n           if(!fest_data.performers)\n           fest_data.performers='';\n\n           var query = \"update festivals set title='\"+fest_data.title+\"', subtitle='\"+fest_data.subtitle+\"', full_title='\"+\n           fest_data.fullTitle+\"', from_date='\"+fest_data.fromDate+\"', to_date='\"+fest_data.toDate+\"', description='\"+\n           fest_data.description+\"', capacity='\"+fest_data.capacity+\"', age=\"+fest_data.age+\", budget='\"+fest_data.budget+\"', city='\"+\n           fest_data.city+\"' ,country='\"+fest_data.country+\"', img_url='\"+fest_data.img_url+\"', performers='[\"+fest_data.performers+\"]'\"+\n           \" where fest_id=\"+fest_id+\" ;\";\n           connection.query(query,function(err,rows){\n               connection.release();\n               if(!err) {\n                   res.redirect('/festival/'+fest_id+\"/\"+fest_title);\n               }\n           });\n           connection.on('error', function(err) {\n                 res.json({\"code\" : 100, \"status\" : \"Error in connection database\"});\n                 return;\n           });\n     });\n });\n\n //articles api\n router.get('/articles', (req, res) => {\n   pool.getConnection(function(err,connection){\n           if (err) {\n             connection.release();\n             res.status(100).json({\"status\" : \"Error in connection database\"});\n             return;\n           }\n           var query = \"select id, title, img_url from articles order by weight desc limit 10;\";\n           connection.query(query,function(err,rows){\n               connection.release();\n               if(!err) {\n                   res.status(200).json(rows);\n               }\n           });\n\n           connection.on('error', function(err) {\n                 res.json({\"code\" : 100, \"status\" : \"Error in connection database\"});\n                 return;\n           });\n     });\n });\n\n router.get('/articles/:_id', (req, res) => {\n   let blog_id = req.params._id;\n   pool.getConnection(function(err,connection){\n           if (err) {\n             connection.release();\n             res.status(100).json({\"status\" : \"Error in connection database\"});\n             return;\n           }\n           var query = \"select * from articles where id=\"+blog_id;\n           connection.query(query,function(err,rows){\n               connection.release();\n               if(!err) {\n                   res.status(200).json(rows);\n               }\n           });\n\n           connection.on('error', function(err) {\n                 res.json({\"code\" : 100, \"status\" : \"Error in connection database\"});\n                 return;\n           });\n     });\n });\n\n router.post('/add/article', (req, res) => {\n   let blog_data = req.body;\n   pool.getConnection(function(err,connection){\n           if (err) {\n             connection.release();\n             res.status(100).json({\"status\" : \"Error in connection database\"});\n             return;\n           }\n           let query = \"insert into articles (title, subtitle, full_title, description, img_url, weight, writer_id) values\";\n           let values = \"('\"+blog_data.title+\"','\"+blog_data.subtitle+\"','\"+blog_data.fullTitle+\"','\"+\n           blog_data.description+\"','\"+blog_data.image_url+\"',\"+blog_data.weight+\",\"+blog_data.user_id+\");\"\n           query += values;\n           console.log(query);\n           connection.query(query,function(err,rows){\n               connection.release();\n               if(!err) {\n                   res.redirect('/articles');\n               }\n           });\n\n           connection.on('error', function(err) {\n                 res.json({\"code\" : 100, \"status\" : \"Error in connection database\"});\n                 return;\n           });\n     });\n })\n\n router.post('/edit/article/:blog_id/:user_id/:blog_title', (req, res) => {\n   let blog_id = req.params.blog_id;\n   let blog_title = req.params.blog_title;\n   let user_id = req.params.user_id;\n   let blog_data = req.body;\n   pool.getConnection(function(err,connection){\n           if (err) {\n             connection.release();\n             res.status(100).json({\"status\" : \"Error in connection database\"});\n             return;\n           }\n\n           var query = \"update articles set title='\"+blog_data.title+\"', subtitle='\"+blog_data.subtitle+\"', full_title='\"+\n           blog_data.fullTitle+\"', description='\"+blog_data.description+\"', weight=\"+blog_data.weight+\", img_url='\"+\n           blog_data.image_url+\"' where id=\"+blog_id+\" ;\";\n\n           connection.query(query,function(err,rows){\n               connection.release();\n               if(!err) {\n                   res.redirect('/article/'+blog_id+\"/\"+blog_title);\n               }\n           });\n           connection.on('error', function(err) {\n                 res.json({\"code\" : 100, \"status\" : \"Error in connection database\"});\n                 return;\n           });\n     });\n });\n\n\n\nmodule.exports = router;\n"]}