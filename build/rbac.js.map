{"version":3,"sources":["../src/rbac.js"],"names":["RBAC","opts","init","roles","TypeError","map","Object","keys","forEach","role","can","inherits","operation","name","when","params","$role","length","some","childRole","superadmin","curator","writer","user","id","post","owner","rolesList"],"mappings":";;;;;;;;;;;;IAAMA,I;AACF,kBAAYC,IAAZ,EAAkB;AAAA;;AACd,aAAKC,IAAL,CAAUD,IAAV;AACH;;;;6BAEIE,K,EAAO;AACR,gBAAG,QAAOA,KAAP,yCAAOA,KAAP,OAAiB,QAApB,EAA8B;AAC1B,sBAAM,IAAIC,SAAJ,CAAc,6BAAd,CAAN;AACH;;AAED,iBAAKD,KAAL,GAAaA,KAAb;AACA,gBAAIE,MAAM,EAAV;AACAC,mBAAOC,IAAP,CAAYJ,KAAZ,EAAmBK,OAAnB,CAA2B,gBAAQ;AAC/BH,oBAAII,IAAJ,IAAY;AACRC,yBAAK;AADG,iBAAZ;AAGA,oBAAGP,MAAMM,IAAN,EAAYE,QAAf,EAAyB;AACrBN,wBAAII,IAAJ,EAAUE,QAAV,GAAqBR,MAAMM,IAAN,EAAYE,QAAjC;AACH;;AAEDR,sBAAMM,IAAN,EAAYC,GAAZ,CAAgBF,OAAhB,CAAwB,qBAAa;AACjC,wBAAG,OAAOI,SAAP,KAAqB,QAAxB,EAAkC;AAC9BP,4BAAII,IAAJ,EAAUC,GAAV,CAAcE,SAAd,IAA2B,CAA3B;AACH,qBAFD,MAEO,IAAG,OAAOA,UAAUC,IAAjB,KAA0B,QAA1B,IACH,OAAOD,UAAUE,IAAjB,KAA0B,UAD1B,EACsC;;AAEzCT,4BAAII,IAAJ,EAAUC,GAAV,CAAcE,UAAUC,IAAxB,IAAgCD,UAAUE,IAA1C;AACH;AACJ,iBARD;AAUH,aAlBD;;AAoBA,iBAAKX,KAAL,GAAaE,GAAb;AACH;;;4BAEGI,I,EAAMG,S,EAAWG,M,EAAQ;AAAA;;AAE7B,gBAAG,CAAC,KAAKZ,KAAL,CAAWM,IAAX,CAAJ,EAAsB;AAClB,uBAAO,KAAP;AACH;AACD,gBAAIO,QAAQ,KAAKb,KAAL,CAAWM,IAAX,CAAZ;;AAEA,gBAAGO,MAAMN,GAAN,CAAUE,SAAV,CAAH,EAAyB;;AAErB,oBAAG,OAAOI,MAAMN,GAAN,CAAUE,SAAV,CAAP,KAAgC,UAAnC,EAA+C;AAC3C,2BAAO,IAAP;AACH;;AAED,oBAAGI,MAAMN,GAAN,CAAUE,SAAV,EAAqBG,MAArB,CAAH,EAAiC;AAC7B,2BAAO,IAAP;AACH;AACJ;;AAGD,gBAAG,CAACC,MAAML,QAAP,IAAmBK,MAAML,QAAN,CAAeM,MAAf,GAAwB,CAA9C,EAAiD;AAC7C,uBAAO,KAAP;AACH;;AAGD,mBAAOD,MAAML,QAAN,CAAeO,IAAf,CAAoB;AAAA,uBAAa,MAAKR,GAAL,CAASS,SAAT,EAAoBP,SAApB,EAA+BG,MAA/B,CAAb;AAAA,aAApB,CAAP;AACH;;;;;;AAID,IAAIZ,QAAQ;AACRiB,gBAAY;AACRV,aAAK,CAAC,SAAD,CADG;AAERC,kBAAU,CAAC,SAAD;AAFF,KADJ;AAKRU,aAAS;AACPX,aAAK,CAAC,OAAD,EAAS,MAAT,CADE;AAEPC,kBAAU,CAAC,MAAD;AAFH,KALD;AASRW,YAAQ;AACJZ,aAAK,CAAC,OAAD,EAAU;AACXG,kBAAM,MADK;AAEXC,kBAAM,cAAUC,MAAV,EAAkB;AACpB,uBAAOA,OAAOQ,IAAP,CAAYC,EAAZ,KAAmBT,OAAOU,IAAP,CAAYC,KAAtC;AACH;AAJU,SAAV,CADD;AAOJf,kBAAU,CAAC,MAAD;AAPN,KATA;AAkBRY,UAAM;AACFb,aAAK,CAAC,MAAD;AADH;AAIV;AAtBY,CAAZ,CAuBA,IAAIiB,YAAY,IAAI3B,IAAJ,CAASG,KAAT,CAAhB;AACA;;kBAEewB,S","file":"rbac.js","sourcesContent":["class RBAC {\n    constructor(opts) {\n        this.init(opts);\n    }\n\n    init(roles) {\n        if(typeof roles !== 'object') {\n            throw new TypeError('Expected an object as input');\n        }\n\n        this.roles = roles;\n        let map = {};\n        Object.keys(roles).forEach(role => {\n            map[role] = {\n                can: {}\n            };\n            if(roles[role].inherits) {\n                map[role].inherits = roles[role].inherits;\n            }\n\n            roles[role].can.forEach(operation => {\n                if(typeof operation === 'string') {\n                    map[role].can[operation] = 1;\n                } else if(typeof operation.name === 'string'\n                    && typeof operation.when === 'function') {\n\n                    map[role].can[operation.name] = operation.when;\n                }\n            });\n\n        });\n\n        this.roles = map;\n    }\n\n    can(role, operation, params) {\n\n    if(!this.roles[role]) {\n        return false;\n    }\n    let $role = this.roles[role];\n\n    if($role.can[operation]) {\n\n        if(typeof $role.can[operation] !== 'function') {\n            return true;\n        }\n\n        if($role.can[operation](params)) {\n            return true;\n        }\n    }\n\n\n    if(!$role.inherits || $role.inherits.length < 1) {\n        return false;\n    }\n\n\n    return $role.inherits.some(childRole => this.can(childRole, operation, params));\n}\n\n}\n\nlet roles = {\n    superadmin: {\n        can: ['publish'],\n        inherits: ['curator']\n    },\n    curator: {\n      can: ['write','edit'],\n      inherits: ['user']\n    },\n    writer: {\n        can: ['write', {\n            name: 'edit',\n            when: function (params) {\n                return params.user.id === params.post.owner;\n            }\n        }],\n        inherits: ['user']\n    },\n    user: {\n        can: ['read']\n    }\n}\n// console.log(typeof roles);\nvar rolesList = new RBAC(roles);\n// console.log(rolesList.can('writer','edit',{user:{id:1},post:{owner:1}}));\n\nexport default rolesList;\n"]}